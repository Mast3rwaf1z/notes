apr 1: 1 hour in afternoon
Did exercise1 in exercises to orient myself in the program and gained a basic understanding of the code for this project

apr 11: 16:40 - 17:40
made a class SteppingEmulator implementing AsyncEmulator(this made the most sense as i wouldn't have to implement everything unrelated to this feature) and edited exercise_runner to use this class, added the first few class elements for this emulator to work as expected, removed solution to exercises

apr 12: 15:55 - 16:20
changed class from input statement to pynput, might wanna add a prompt to install this software? added a little description at init

apr 16: 15:50 - 17:35
cleaned the code a bit for the stepping emulator
started working on GUI, made a wrapper for exercise runner and added some circles to show devices

apr 20: 17:00 - 19:00
created task 2 branch and continued working on gui

apr 21: 22:30 - 23:30
looked into weird placement of elements on linux and fixed it (a little badly but it works

apr 26: 16:40 - 17:40
moved some stuff into exercise runner to be executed in main thread while the main function of the program is run in a seperate thread, this is because tkinter will not work unless it is running in the main thread

apr 27: 17:00 - 18:00
more data visualisation

apr 28: 18:50 - 19:50
moved the creation of device visualisation out from main to easier create these devices, this will also allow for more configurability

apr 29: 18:40 - 20:20
table and data formatting

may 1: 00:00 - 02:30
drew some diagrams as a plan to how i want to place the individual device visualisation in the window

may 1: 18:10 - 19:10
fixed the placement of the devices, they are placed precisely how they should be now

may 1: 23:00 - 00:00
added the last few tables and alligned the contents in the devices

may 2: 19:00 - 20:00
merged branch 22 and main, added new stuff from gui to stepper and tested with another exercise

may 9: 18:50 - 19:50
read some document sent by supervisor
fixed issue where keyboard listeners was never killed
added lines to the visualisation

may 9: 23:30 - 00:30
added lines to canvas for sending messages, might also add one for receiving and color code them with a prompt in the top left corner about what the colors mean

may 11: 23:30 - 01:30
fixed issues with too much content in messages and i'm pretty much satisfied with the gui as it is now

may 12: 23:30 - 01:30
added controls page to gui, tested some optimization for windows but failed, added received lines and is satisfied with the overall gui more now. created pull request, probably gonna work on readme next

may 19: 23:30 - 01:00
show and pick command initial work

may 21: 12:20 - 13:50
started looking into implementing the syncemulator into stepper and worked more on the pick command

june 18: 12:00 - 16:00
finished step 3 of extending stepper, it can now successfully switch between async and sync execution.
wrote a few comments on the issue tracker to gain an explaination on how to implement the issues
started and finished writing an updated readme

june 20: 12:30 - 15:00
moved some stuff into functions in stepper
looked into how to do the reordering
need to fix a problem with queue being defined as a message rather than a list, i can't reorder

june 24: 12:30 - 14:30
fixed the issue with queue being defined as a message, i was just stupid

june 25: 12:30 - 14:00
finished extending stepper task and made pull request
started planning unit test task

july 2: 18:00 - 19:15
merged GUI branch and stepper extension branch to see if they worked together, they do not, so i will fix the merge conflicts
when i'm at it i'll add extension of stepper buttons to the GUI later

july 3: 13:00 - 15:30
Made GUI buttons and implemented two of them to work with the stepper extension, len(content)this is the pick and emulator switch buttons.

july 4: 12:00 - 12:30
added the last extension command to gui

july 11: 13:20 - 15:20
made pull request for merge fix
started implementing modified medium for unit tests

july 12: 12:30 - 15:20
made the test framework executable
changed a few things in exercise runner so test framework can be executed easier
fixed the csv reader
found out the way i was implementing it might be impossible
need to research it abit more but i think i have an idea for a better solution, which only really requires an extension at the end of the original framework
  this involves including some actual assertions, and changing the framework from using CSV to using a unit testing file with some assertions made for each exercise premade, this will make it easier for the course holder as well

july 13: 12:00 - 14:00
finished my changes to exercise_runner
added testing modules
changed how i want to make the execution sequence function
wrote a comment on the unit test issue detailing everything i've worked on so far with the issue

july 14: 11:30 - 14:00
added another command to exercise_runner, to allow for custom testing csv files, they need to be in the correct directory
changed the testing system from being one file to the receiving and sending processes are using seperate files
  the reason this is neccisary is because the sending processes will be waiting forever if all devices reach a sending state while the next queued action is a receive
  the user will still be able to evaluate their solution as this requires the processes to still listen for messages after sending has stopped, until they have the messages they need
i have also moved the files from "emulators/tests/file.csv" to "emulators/tests/sending/file.csv" and "emulators/tests/receiving/file.csv"
the csv reader has also been changed from making a list of messages in tuples, to a list of integers, in the receiving queue representing destinations and in the sending queue representing sources
  in this case the csv has also been changed, removing the "type" and "destination" columns from the sending csv and the "type" and "source" columns from the receiving csv
